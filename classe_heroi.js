// Tipos de her√≥i com atributos balanceados
const tiposDeHeroi = {
    mago: { ataque: "magia", poderDeAtaque: 40, vida: 100 },
    guerreiro: { ataque: "espada", poderDeAtaque: 45, vida: 130 }, // Nerfado levemente
    monge: { ataque: "artes marciais", poderDeAtaque: 35, vida: 120 },
    ninja: { ataque: "shuriken", poderDeAtaque: 30, vida: 110 },
    arqueiro: { ataque: "flecha precisa", poderDeAtaque: 38, vida: 105 },
    curandeiro: { ataque: "cura energ√©tica", poderDeAtaque: 25, vida: 130 },
    desconhecido: { ataque: "um ataque indefinido", poderDeAtaque: 20, vida: 100 }
};

// Classe principal do her√≥i
class Hero {
    constructor(nome, idade, tipo, poderDeAtaque) {
        this.nome = nome;
        this.idade = idade;
        this.tipo = tipo.toLowerCase();

        // Busca atributos do tipo de her√≥i ou usa 'desconhecido'
        const info = tiposDeHeroi[this.tipo] || tiposDeHeroi.desconhecido;

        // Permite sobrescrever poderDeAtaque se passado no construtor
        this.poderDeAtaque = (poderDeAtaque !== undefined && poderDeAtaque !== null)
            ? poderDeAtaque
            : info.poderDeAtaque;

        this.ataqueDescricao = info.ataque;
        this.vidaMaxima = info.vida;
        this.vidaAtual = this.vidaMaxima;
        this.pocoes = 3; // Cada her√≥i come√ßa com 3 po√ß√µes
        this.estaDefendendo = false; // Estado de defesa
    }

    // M√©todo de ataque
    atacar(alvo) {
        let dano = this.poderDeAtaque;
        // 20% de chance de ataque cr√≠tico
        if (Math.random() < 0.2) {
            dano *= 2;
            console.log("üí• ATAQUE CR√çTICO!");
        }

        // Curandeiro se cura ao atacar
        if (this.tipo === "curandeiro") {
            this.vidaAtual += 10;
            if (this.vidaAtual > this.vidaMaxima) this.vidaAtual = this.vidaMaxima;
            console.log(`üåø ${this.nome} absorveu energia e se curou 10 de vida!`);
        }

        console.log(`\nüî¥ ${this.nome} (${this.tipo}) atacou usando ${this.ataqueDescricao}!`);
        const resultado = alvo.receberDano(dano);
        console.log(resultado);
    }

    // Recebe dano, considerando defesa
    receberDano(dano) {
        let danoFinal = this.estaDefendendo ? Math.round(dano / 2) : dano;
        this.vidaAtual -= danoFinal;
        if (this.vidaAtual < 0) this.vidaAtual = 0;

        const msg = this.estaDefendendo
            ? `üõ°Ô∏è ${this.nome} defendeu e reduziu o dano para ${danoFinal}.`
            : `üí• ${this.nome} recebeu ${danoFinal} de dano.`;

        this.estaDefendendo = false; // Defesa s√≥ vale para um ataque
        return `${msg} Vida atual: ${this.vidaAtual}/${this.vidaMaxima}.`;
    }

    // Prepara defesa para o pr√≥ximo ataque
    defender() {
        this.estaDefendendo = true;
        console.log(`üß± ${this.nome} se preparou para defender o pr√≥ximo ataque.`);
    }

    // Usa po√ß√£o para recuperar vida
    usarPocao() {
        if (this.pocoes <= 0) {
            console.log(`‚ö†Ô∏è ${this.nome} n√£o tem mais po√ß√µes!`);
            return;
        }
        if (this.vidaAtual === this.vidaMaxima) {
            console.log(`üß¨ ${this.nome} j√° est√° com a vida cheia.`);
            return;
        }

        const cura = 25;
        this.vidaAtual += cura;
        if (this.vidaAtual > this.vidaMaxima) this.vidaAtual = this.vidaMaxima;

        this.pocoes--;
        console.log(`üß™ ${this.nome} usou uma po√ß√£o! Recuperou ${cura} de vida. Vida atual: ${this.vidaAtual}/${this.vidaMaxima}. Po√ß√µes restantes: ${this.pocoes}.`);
    }

    // Mostra status do her√≥i
    status() {
        return `‚ù§Ô∏è ${this.nome} (${this.tipo}) - Vida: ${this.vidaAtual}/${this.vidaMaxima} | üß™ Po√ß√µes: ${this.pocoes}`;
    }

    // Verifica se est√° vivo
    estaVivo() {
        return this.vidaAtual > 0;
    }

    // Restaura vida e po√ß√µes (usado no in√≠cio de batalhas)
    restaurarVida() {
        this.vidaAtual = this.vidaMaxima;
        this.pocoes = 3;
        this.estaDefendendo = false;
    }
}

// Sorteia uma a√ß√£o aleat√≥ria para o her√≥i
function escolherAcaoAleatoria() {
    const acoes = ["atacar", "defender", "usarPocao"];
    return acoes[Math.floor(Math.random() * acoes.length)];
}

// Simula uma batalha entre dois her√≥is
function batalhar(heroi1, heroi2) {
    let turno = 1;
    console.log(`\n‚öîÔ∏è BATALHA: ${heroi1.nome.toUpperCase()} VS ${heroi2.nome.toUpperCase()}`);

    // Restaura vida e po√ß√µes antes da luta
    heroi1.restaurarVida();
    heroi2.restaurarVida();

    // Loop at√© um dos her√≥is morrer
    while (heroi1.estaVivo() && heroi2.estaVivo()) {
        // Sorteia quem ataca e quem defende
        const [atacante, defensor] = Math.random() < 0.5 ? [heroi1, heroi2] : [heroi2, heroi1];
        const acao = escolherAcaoAleatoria();

        // Executa a√ß√£o sorteada
        switch (acao) {
            case "atacar": atacante.atacar(defensor); break;
            case "defender": atacante.defender(); break;
            case "usarPocao": atacante.usarPocao(); break;
        }

        turno++;
    }

    // Exibe vencedor
    const vencedor = heroi1.estaVivo() ? heroi1 : heroi2;
    console.log(`üèÜ Vencedor: ${vencedor.nome}\n`);
    return vencedor;
}

// Embaralha array de her√≥is (Fisher-Yates)
function embaralhar(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

// Organiza torneio eliminat√≥rio entre her√≥is
function torneio(herois) {
    let rodada = 1;
    embaralhar(herois);

    while (herois.length > 1) {
        console.log(`\nüîÅ RODADA ${rodada} - ${herois.length} her√≥is restantes`);
        const proximos = [];

        for (let i = 0; i < herois.length; i += 2) {
            if (i + 1 >= herois.length) {
                // Avan√ßa automaticamente se n√∫mero √≠mpar de her√≥is
                console.log(`üëë ${herois[i].nome} avan√ßa automaticamente para a pr√≥xima fase!`);
                proximos.push(herois[i]);
            } else {
                // Batalha entre pares
                const vencedor = batalhar(herois[i], herois[i + 1]);
                proximos.push(vencedor);
            }
        }

        herois = proximos;
        rodada++;
    }

    // Exibe campe√£o do torneio
    console.log(`\nüéâ CAMPE√ÉO DO TORNEIO: ${herois[0].nome.toUpperCase()} üéâ`);
}

// Cria√ß√£o dos her√≥is participantes
const herois = [
    new Hero("Arnaldo", 30, "mago"),
    new Hero("Ryu", 25, "ninja"),
    new Hero("Gandalf", 300, "mago"),
    new Hero("Conan", 35, "guerreiro"),
    new Hero("Legolas", 200, "arqueiro"),
    new Hero("Elrond", 5000, "curandeiro"),
    new Hero("Shaolin", 45, "monge"),
    new Hero("Naruto", 17, "ninja")
];

// Inicia o torneio
torneio(herois);